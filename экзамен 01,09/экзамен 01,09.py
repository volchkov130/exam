#1.	Напишите функцию, которая будет принимать номер кредитной карты и
# показывать только последние 4 цифры. Остальные цифры должны заменяться
# звездочками

def karta(a):

    p = len(a)-4
    for i in a:
        while i<a:
            i == "*"
        else:
            break
    print(karta(a))


print(int(input("ввести номер карты:")))


#2.	Напишите функцию, которая проверяет: является ли слово палиндромом
def slovo(a):
    for i in a:
        if str(i)==str(i)[::-1]:
            print("палиндром")
        else:
            print(" не палиндром")

print(int(input("ввести слово:")))


#3Класс Tomato:
#1.	Создайте класс Tomato
#2.	Создайте статическое свойство states, которое будет содержать все стадии
# созревания помидора
# 3.	Создайте метод __init__(), внутри которого будут определены два
# динамических protected свойства: 1) _index - передается параметром и
# 2) _state - принимает первое значение из словаря states
# 4.	Создайте метод grow(), который будет переводить томат на следующую
# стадию созревания
# 5.	Создайте метод is_ripe(), который будет проверять, что томат созрел
# (достиг последней стадии созревания)
class Tomato():
    states=(1,2,3)
    def __init__(self,index,state):
        self._index=1
        self._state = states(self)
    def grow(self):
        for i in self._state:
            i+=1
    def is_ripe(self):
        if self._state==states([-1]):
        print("созрел")



# Класс TomatoBush
# 1.	Создайте класс TomatoBush
# 2.	Определите метод __init__(), который будет принимать в качестве параметра
# количество томатов и на его основе будет создавать список объектов класса Tomato.
# Данный список будет храниться внутри динамического свойства tomatoes.
# 3.	Создайте метод grow_all(), который будет переводить все объекты из списка
# томатов на следующий этап созревания
# 4.	Создайте метод all_are_ripe(), который будет возвращатьTrue, если все
# томаты из списка стали спелыми
# 5.	Создайте метод give_away_all(), который будет чистить список томатов после
# сбора урожая

class TomatoBush():
    def __init__(self,kolvo):
        self.kolvo=kolvo
    def tomatoes(self):
        self.list=type(list(self.kolvo(Tomato)))
    def grow_all(self):
        for i in self.list:
            i+=1
    def  all_are_ripe(self):
        for i in self.list:
            if i==Tomato(states([-1])):
                print(True)
            else:
                False
    def  give_away_all(self):
        self.list=0


# Класс Gardener
# 1.	Создайте класс Gardener
# 2.	Создайте метод __init__(), внутри которого будут определены два
# динамических свойства: 1) name - передается параметром, является публичным и
# 2) _plant принимает объект класса Tomato, является protected
# 3.	Создайте метод work(), который заставляет садовника работать, что
# позволяет растению становиться более зрелым
# 4.	Создайте метод harvest(), который проверяет, все ли плоды созрели.
# Если все садовник собирает урожай. Если нет - метод печатает предупреждение.
# 5.	Создайте статический метод knowledge_base(), который выведет в консоль
# справку по садоводству.
# Тесты:
# 1.	Вызовите справку по садоводству
# 2.	Создайте объекты классов TomatoBush и Gardener
# 3.	Используя объект класса Gardener, поухаживайте за кустом с помидорами
# 4.	Попробуйте собрать урожай
# 5.	Если томаты еще не дозрели, продолжайте ухаживать за ними
# 6. Соберите урожай

class Gardener():
    def __init__(self,name,plant):
        self.name=name
        self._plant=Tomato(self)
    def work(self):
        for i in self._plant:
            i+=1
    def harvest(self):
        for i in self._plant:
            if i==Tomato(states([-1])):
                print("садовник собирает урожай")
            else:
                print("не все созрело")
    @staticmethod
    def knowledge_base():
        print("справка по садоводству")

ob1=TomatoBush(5)
ob2=Gardener('роза')
ob2=ob1
Tomato.work()
Tomato.harvest()
